// Generated by CoffeeScript 1.9.0
var Contact, PICTUREREL, access_token, addContactPicture, async, createContact, https, im, listContacts, log, numberProcessed, realtimer, total, url, _;

Contact = require('../models/contact');

async = require('async');

realtimer = require('./realtimer');

log = require('printit')({
  prefix: 'contactsimport'
});

im = require('imagemagick-stream');

_ = require('lodash');

https = require('https');

url = require('url');

access_token = null;

numberProcessed = 0;

total = 0;

createContact = function(gContact, callback) {
  var name, toCreate;
  log.debug("import 1 contact");
  toCreate = new Contact(Contact.fromGoogleContact(gContact));
  name = toCreate.getName();
  log.debug("looking or " + name);
  return Contact.request('byName', {
    key: name
  }, function(err, contacts) {
    if (err) {
      numberProcessed += 1;
      realtimer.sendContacts({
        number: numberProcessed,
        total: contact
      });
      log.debug("err " + err);
      return callback(null);
    } else if (contacts.length === 0) {
      toCreate.revision = new Date().toISOString();
      log.debug("creating " + name);
      Contact.create(toCreate, function(err, created) {
        log.debug("created " + name + " err=" + err);
        if (err) {
          return callback(err);
        }
        return addContactPicture(created, gContact, function(err) {
          log.debug("picture err " + err);
          return setTimeout(callback, 100);
        });
      });
      numberProcessed += 1;
      return realtimer.sendContacts({
        number: numberProcessed,
        total: total
      });
    } else {
      numberProcessed += 1;
      realtimer.sendContacts({
        number: numberProcessed,
        total: total
      });
      log.debug("existing " + name);
      return callback(null);
    }
  });
};

PICTUREREL = "http://schemas.google.com/contacts/2008/rel#photo";

addContactPicture = function(cozyContact, gContact, done) {
  var opts, pictureLink, pictureUrl, _ref;
  pictureLink = gContact.link.filter(function(link) {
    return link.rel === PICTUREREL;
  });
  pictureUrl = (_ref = pictureLink[0]) != null ? _ref.href : void 0;
  if (!pictureUrl) {
    return done(null);
  }
  opts = url.parse(pictureUrl);
  opts.headers = {
    'Authorization': 'Bearer ' + access_token
  };
  return https.get(opts, function(stream) {
    var thumbStream, type;
    stream.on('error', done);
    if (stream.statusCode !== 200) {
      log.warn("error fetching " + pictureUrl, stream.statusCode);
      return done(null);
    }
    thumbStream = stream.pipe(im().resize('300x300^').crop('300x300'));
    thumbStream.on('error', done);
    thumbStream.path = 'useless';
    type = stream.headers['content-type'];
    opts = {
      name: 'picture',
      type: type
    };
    return cozyContact.attachFile(thumbStream, opts, function(err) {
      if (err) {
        log.error("picture " + err);
      } else {
        log.debug("picture ok");
      }
      return done(err);
    });
  });
};

listContacts = function(callback) {
  var opts, req;
  opts = {
    host: 'www.google.com',
    port: 443,
    path: '/m8/feeds/contacts/default/full?alt=json&max-results=10000',
    method: 'GET',
    headers: {
      'Authorization': 'Bearer ' + access_token
    }
  };
  req = https.request(opts, function(res) {
    var data;
    data = [];
    res.on('error', callback);
    res.on('data', function(chunk) {
      return data.push(chunk);
    });
    return res.on('end', function() {
      var err, result;
      if (res.statusCode === 200) {
        try {
          result = JSON.parse(data.join(''));
          return callback(null, result.feed.entry);
        } catch (_error) {
          err = _error;
          return callback(err);
        }
      } else {
        return callback(new Error("Error " + res.statusCode));
      }
    });
  });
  req.on('error', callback);
  return req.end();
};

module.exports = function(token, callback) {
  access_token = token;
  log.debug('request contacts list');
  numberProcessed = 0;
  return listContacts(function(err, contacts) {
    if (err) {
      return callback(err);
    }
    log.debug("got " + contacts.length + " contacts");
    total = contacts.length;
    return async.eachSeries(contacts, createContact, callback);
  });
};
