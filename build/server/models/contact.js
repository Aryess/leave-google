// Generated by CoffeeScript 1.9.0
var Contact, DataPoint, PREFIX, async, cozydb, fs, log,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

cozydb = require('cozydb');

async = require('async');

fs = require('fs');

log = require('printit')({
  prefix: 'Contact Model'
});

DataPoint = (function(_super) {
  __extends(DataPoint, _super);

  function DataPoint() {
    return DataPoint.__super__.constructor.apply(this, arguments);
  }

  DataPoint.schema = {
    name: String,
    value: cozydb.NoSchema,
    pref: Boolean,
    type: String
  };

  return DataPoint;

})(cozydb.Model);

module.exports = Contact = (function(_super) {
  __extends(Contact, _super);

  function Contact() {
    return Contact.__super__.constructor.apply(this, arguments);
  }

  Contact.docType = 'contact';

  Contact.schema = {
    id: String,
    fn: String,
    n: String,
    org: String,
    title: String,
    department: String,
    bday: String,
    nickname: String,
    url: String,
    revision: Date,
    datapoints: [DataPoint],
    note: String,
    tags: [String],
    binary: Object,
    _attachments: Object
  };

  Contact.cast = function(attributes, target) {
    target = Contact.__super__.constructor.cast.call(this, attributes, target);
    return target;
  };

  return Contact;

})(cozydb.CozyModel);

Contact.prototype.updateAttributes = function(changes, callback) {
  changes.revision = new Date().toISOString();
  return Contact.__super__.updateAttributes.apply(this, arguments);
};

Contact.prototype.save = function(callback) {
  this.revision = new Date().toISOString();
  return Contact.__super__.save.apply(this, arguments);
};

PREFIX = 'http://schemas.google.com/g/2005#';

Contact.fromGoogleContact = function(gContact) {
  var contact, email, full_name, phone, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
  contact = {};
  full_name = ((_ref = gContact.title) != null ? _ref.$t : void 0) || '(empty name)';
  contact.fn = full_name;
  contact.n = full_name + ";;;;";
  contact.note = ((_ref1 = gContact.content) != null ? _ref1.$t : void 0) || '';
  contact.datapoints = [];
  _ref2 = gContact['gd$email'] || [];
  for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
    email = _ref2[_i];
    contact.datapoints.push({
      name: "email",
      pref: email.primary || false,
      value: email.address,
      type: ((_ref3 = email.rel) != null ? _ref3.replace(PREFIX, '') : void 0) || 'other'
    });
  }
  _ref4 = gContact['gd$phoneNumber'] || [];
  for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
    phone = _ref4[_j];
    contact.datapoints.push({
      name: "tel",
      pref: phone.primary || false,
      value: (_ref5 = phone.uri) != null ? _ref5.replace('tel:', '') : void 0,
      type: ((_ref6 = phone.rel) != null ? _ref6.replace(PREFIX, '') : void 0) || 'other'
    });
  }
  return contact;
};

Contact.prototype.getName = function() {
  var dp, name, _i, _len, _ref;
  name = '';
  if ((this.fn != null) && this.fn.length > 0) {
    name = this.fn;
  } else if (this.n && this.n.length > 0) {
    name = this.n.split(';').join(' ').trim();
  } else {
    _ref = this.datapoints;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dp = _ref[_i];
      if (dp.name === 'email') {
        name = dp.value;
      }
    }
  }
  return name;
};
